/*
 * =====================================================================================
 *
 *       Filename:  longest_increasing_subsequence.c
 *
 *    Description:  Link : https://practice.geeksforgeeks.org/problems/increasing-sub-sequence/0
 *
 *        Version:  1.0
 *        Created:  03/15/2019 01:18:29 AM
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  Sushant Moon (), sushant.moon@gmail.com
 *   Organization:  
 *
 * =====================================================================================
 */


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define max(a,b) (a>b)?a:b

int longest_common_subsequence(char *A, char *B, int len_A, int len_B){
	int i, j;

	// defining M
	int **M = (int **)malloc(sizeof(int *)*(len_A+1));
	for(i = 0; i<=len_A; i++){
		M[i] = (int *)malloc(sizeof(int)*(len_B+1));
	}

	// filling up usgin recurrence
	for(i=0; i<=len_A; i++){
		for(j=0; j<=len_B; j++){
			if(i == 0 || j == 0){
				M[i][j] = 0;
			}
			else if(A[i-1] == B[j-1]){
				M[i][j] = M[i-1][j-1] + 1;
			}
			else{
				M[i][j] = max(M[i-1][j], M[i][j-1]);
			}
		}
	}
	
	int value = M[len_A][len_B];
	// free memory
	for(i = 0; i<=len_A; i++){
		free(M[i]);
	}
	free(M);
	return value;
}

int comparator(const void *a, const void *b){
	return strcmp((char *)a, (char *)b);
}

int main() {
	int t;
	scanf("%d", &t);
	while(t--){
	    char *a = (char *)calloc(sizeof(char), 1000);
	    scanf("%s", a);
	    
		int length = strlen(a);
	    char *A = (char *)calloc(sizeof(char), length);
	    strcpy(A, a);
	    
		char *sorted_A = (char *)calloc(sizeof(char), length);
	    strcpy(sorted_A, A);
	    
		qsort(sorted_A, length, sizeof(char), comparator);
	   
		// printf("%s\n%s\n", sorted_A, A);
		printf("%d\n", longest_common_subsequence(sorted_A, A, length, length));

		free(a);
	    free(A);
	    free(sorted_A);
	}
	return 0;
}


